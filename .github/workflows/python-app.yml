name: Python App CI/CD

on:
  push:
    branches:
      - parking/cleaver
  pull_request:
    branches:
      - parking/cleaver

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository code
      uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v3
      with:
        python-version: '3.13'

    - name: Upgrade pip
      run: |
        pip install --upgrade pip

    - name: Install dependencies
      run: |
          pip install -r requirements.txt
    

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run ruff
      uses: astral-sh/ruff-action@v3

    - name: Run isort
      run: |
        isort .

   

    - name: Docker build and run
      env:
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
      run: |
        docker compose up --build -d

    - name: List containers
      run: |
        echo "Available containers:"
        docker ps -a

    - name: Get container name
      id: get_container_name
      run: |
        CONTAINER_NAME=$(docker ps -a --filter="name=web_" --format="{{.Names}}")
        echo "Container name: $CONTAINER_NAME"
        echo "::set-output name=container_name::$CONTAINER_NAME"

    - name: Docker exec
      run: |
        echo "Trying to exec into container: ${{ steps.get_container_name.outputs.container_name }}"
        if [ -n "${{ steps.get_container_name.outputs.container_name }}" ]; then
          docker exec -it ${{ steps.get_container_name.outputs.container_name }} bash
        else
          echo "Container not found."
        fi

    - name: Pytest
      env:
        TEST_DB_URI: "postgresql://test:test@db_test:5433/test_db"
      run: |
        pytest

    - name: Finish workflow
      run: |
        docker compose down -v

